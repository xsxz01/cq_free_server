import { VerticalBox, HorizontalBox } from "std-widgets.slint";
export component ColorButton inherits Rectangle {
    in-out property text <=> txt.text;
    in-out property <brush> pressed-color: #6b8282;
    in-out property <brush> normal-color: #6c616c;
    in-out property <brush> hover-color: #456;
    in-out property <length> radius: root.height / 2;
    callback clicked <=> touch.clicked;
    border-radius: radius;
    border-width: 1px;
    border-color: root.background.darker(25%);
    background: touch.pressed ? pressed-color : touch.has-hover ? hover-color : normal-color;
    height: txt.preferred-height * 1.33;
    min-width: txt.preferred-width + 20px;
    txt := Text {
        x: (parent.width - self.width) / 2 + (touch.pressed ? 2px : 0);
        y: (parent.height - self.height) / 2 + (touch.pressed ? 1px : 0);
        color: touch.pressed ? #fff : #eee;
    }

    touch := TouchArea { }
}

export component ColorSwitchButton inherits Rectangle {
    callback toggled;
    in-out property <string> text;
    in-out property <bool> checked;
    in-out property <brush> on_color;
    in-out property <brush> off_color;
    in-out property <bool> enabled <=> touch-area.enabled;
    background: root.checked ? on_color : off_color;
    animate background { duration: 100ms; }

    height: txt.preferred-height * 1.33;
    min-width: txt.preferred-width + 20px;

    txt := Text {
        text: root.text;
        x: (parent.width - self.width) / 2;
        y: (parent.height - self.height) / 2;
        color: checked ? #fff : #eee;
    }

    touch-area := TouchArea {
        width: root.width;
        height: root.height;
        clicked => {
            if (root.enabled) {
                root.checked = !root.checked;
                root.toggled();
            }
        }
    }
}

export enum GroupAlignment {
    vertical-alignment,
    horizontal-alignment,
}

export struct SwitchButtonGroupOptions {
    title: string,
    checked: bool,
}

export enum SwitchButtonGroupType {
    radio, checkbox
}

export component ColorSwitchButtonGroup inherits Rectangle {
    in-out property <[SwitchButtonGroupOptions]> options;
    in-out property <SwitchButtonGroupType> group-type;
    in-out property <GroupAlignment> alignment: GroupAlignment.vertical-alignment;
    in-out property <length> content-height: 30px;
    in-out property <int> active: 0;
    min-height: root.content-height;

    callback toggled(int);

    if alignment == GroupAlignment.vertical-alignment: VerticalBox {
        for value[idx] in options: Rectangle{
            ColorSwitchButton {
                in-out property <int> id: idx;
                height: root.height / options.length;
                text: value.title;
                on_color: #6b8282;
                off_color: #6c616c;
                toggled => {
                    if(group-type == SwitchButtonGroupType.radio) {
                        // disable other buttons
                    }
                    root.active = idx;
                    self.checked = true;
                    root.toggled(idx);
                }
            }
        }
    }
    if alignment == GroupAlignment.horizontal-alignment: HorizontalBox {
        for value[idx] in options: Rectangle{
            ColorSwitchButton {
                in-out property <int> id: idx;
                width: root.width / options.length;
                text: value.title;
                on_color: #6b8282;
                off_color: #6c616c;
                checked: id == active;
                toggled => {
                    root.active = idx;
                    root.toggled(idx);
                }
            }
        }
    }
}

export component ImageButton inherits Rectangle {
    in-out property <image> pressed-image;
    in-out property <image> hover-image;
    in-out property <image> normal-image;
    callback clicked_down();
    callback clicked_up();
    callback on_hover();
    Image {
        width: parent.width;
        height: parent.height;
        source: touch.pressed ? pressed-image : touch.has-hover ? hover-image : normal-image;
    }

    touch := TouchArea {
        pointer-event(e) => {
            if (e.button == PointerEventButton.left) {
                if (e.kind == PointerEventKind.down) {
                    clicked_down();
                } else if (e.kind == PointerEventKind.up) {
                    clicked_up();
                }
            }
            if (e.kind == PointerEventKind.move) {
                on_hover();
            }
        }
    }
}

export enum IconPosition {
    left, right, top, bottom
}

export component IconButton inherits Rectangle {
    in-out property text <=> txt.text;
    in-out property <image> icon;
    in-out property <IconPosition> icon-position: IconPosition.left;
    in-out property <brush> pressed-color: #6b8282;
    in-out property <brush> normal-color: #6c616c;
    in-out property <brush> hover-color: #456;
    callback clicked <=> touch.clicked;
    border-radius: 5px;
    min-width: txt.preferred-width + 20px;
    height: txt.preferred-height * 1.33;
    border-width: 1px;
    border-color: root.background.darker(25%);
    background: touch.pressed ? pressed-color : touch.has-hover ? hover-color : normal-color;
    VerticalBox {
        padding: 0px;
        alignment: center;
        if icon-position == IconPosition.top: Image {
            height: parent.height / 2;
            source: icon;
        }
        HorizontalBox {
            alignment: center;
            if icon-position == IconPosition.left: Image {
                source: icon;
            }
            txt := Text {
                vertical-alignment: center;
                horizontal-alignment: center;
                color: touch.pressed ? #fff : #eee;
            }

            if icon-position == IconPosition.right: Image {
                source: icon;
            }
        }

        if icon-position == IconPosition.bottom: Image {
            height: parent.height / 2;
            source: icon;
        }
    }

    touch := TouchArea { }
}


    export component Recipe inherits Window {
    VerticalLayout {
        alignment: start;
        ColorButton {
            text: "Button";
        }

        ImageButton {
            pressed-image: @image-url("../../assets/images/test_button/按钮_pressed.png");
            hover-image: @image-url("../../assets/images/test_button/按钮_active.png");
            normal-image: @image-url("../../assets/images/test_button/按钮_normal.png");
            width: 200px;
        }

        IconButton {
            height: 80px;
            text: "IconButton";
            icon: @image-url("../../assets/images/icon_button/按钮-赞_o.png");
            icon-position: IconPosition.right;
        }

        ColorSwitchButton {
            text: "SwitchButton";
            on_color: #6b8282;
            off_color: #6c616c;
        }

        ColorSwitchButtonGroup {
            options: [
                {
                    title: "Option 1",
                    checked: true,
                },
                {
                    title: "Option 2",
                    checked: false,
                },
            ];
            alignment: GroupAlignment.horizontal-alignment;
        }
    }
}
